renv::activate()
renv::status()
renv::snapshot()
.libPaths()
dt <- data.table::fread("sbdb_query_results.csv")
head(dt)
range(dt$a)
dim(dt)
dt <- dt[!is.na(a)]
dim(dt)
range(dt$a)
hist(dt$a)
# Trans-neptunians
dt <- dt[a > 30]
range(dt$a)
dim(dt)
range(dt$a)
plot(x = dt$w, y = dt$sigma_w)
range(dt$sigma_w)
dt <- dt[!is.na(sigma_w)]
dim(dt)
plot(x = dt$w, y = dt$sigma_w)
dt <- dt[!is.na(sigma_w)]
range(dt$sigma_w)
dt <- dt[sigma_w/w < 0.5]
dim(dt)
plot(x = dt$w, y = dt$sigma_w)
install.packages("plotly")
library(plotly)
dt[, sigma_w_level := cut(value, breaks = seq(from = 0, to = 0.5, by = 0.1), labels = FALSE)]
dt[, sigma_w_level := cut(sigma_w/w, breaks = seq(from = 0, to = 0.5, by = 0.1), labels = FALSE)]
head(dt)
table(dt$sigma_w_level)
dt[sigma_w_w <- sigma_w/w]
dt[sigma_w_w := sigma_w/w]
dt[, sigma_w_w := sigma_w/w]
dt
table(dt$sigma_w_level)
dt <- data.table::fread("sbdb_query_results.csv")
nrow(dt)
# Trans-neptunians
dt <- dt[!is.na(a)]
dt <- dt[a > 30]
# Uncertanty levels
dt <- dt[!is.na(sigma_w)]
dt <- dt[sigma_w/w < 0.1]
dt[, sigma_w_w := sigma_w/w]
dt[, sigma_w_level := cut(sigma_w/w, breaks = seq(from = 0, to = 0.1, by = 0.01), labels = FALSE)]
nrow(dt)
# Plot
x_var <- "w"
y_var <- "sigma_w"
color_var <- "sigma_w_level"
plot_ly(
data = dt,
x = ~eval(parse(text = x_var)),
y = ~eval(parse(text = y_var)),
color = ~eval(parse(text = color_var)),
colors = my_palette,
text = ~color_var,
type = "scatter",
mode = "markers",
marker = list(
size = 10
),
hovertemplate = paste0("<b>", x_var_name, ": %{x}<br>",
y_var_name, ": %{y}<br>",
color_var_name, ": %{text}</b><extra></extra>")
) %>%
layout(
xaxis = list(
title = paste0("<b>", x_var_name, "</b>"),
titlefont = list(
size = 20
),
tickfont = list(
size = 18
),
categoryorder = "array"
),
yaxis = list(
title = paste0("<b>", y_var_name, "</b>"),
titlefont = list(
size = 20
),
tickfont = list(
size = 18
)
),
margin = list(
l = 10,
r = 10,
t = 10,
b = 10
),
hoverlabel = list(
font = list(
size = 18
)
),
showlegend = TRUE,
legend = list(
title = list(
text = paste0("<br><b>", color_var_name, "</b>"),
font = list(
size = 18
)
)
)
)
x_var_name <- "w"
y_var_name <- "sigma w"
color_var <- "sigma_w_level"
plot_ly(
data = dt,
x = ~eval(parse(text = x_var)),
y = ~eval(parse(text = y_var)),
color = ~eval(parse(text = color_var)),
colors = my_palette,
text = ~color_var,
type = "scatter",
mode = "markers",
marker = list(
size = 10
),
hovertemplate = paste0("<b>", x_var_name, ": %{x}<br>",
y_var_name, ": %{y}<br>",
color_var_name, ": %{text}</b><extra></extra>")
) %>%
layout(
xaxis = list(
title = paste0("<b>", x_var_name, "</b>"),
titlefont = list(
size = 20
),
tickfont = list(
size = 18
),
categoryorder = "array"
),
yaxis = list(
title = paste0("<b>", y_var_name, "</b>"),
titlefont = list(
size = 20
),
tickfont = list(
size = 18
)
),
margin = list(
l = 10,
r = 10,
t = 10,
b = 10
),
hoverlabel = list(
font = list(
size = 18
)
),
showlegend = TRUE,
legend = list(
title = list(
text = paste0("<br><b>", color_var_name, "</b>"),
font = list(
size = 18
)
)
)
)
color_var_name <- "sigma w level"
plot_ly(
data = dt,
x = ~eval(parse(text = x_var)),
y = ~eval(parse(text = y_var)),
color = ~eval(parse(text = color_var)),
colors = my_palette,
text = ~color_var,
type = "scatter",
mode = "markers",
marker = list(
size = 10
),
hovertemplate = paste0("<b>", x_var_name, ": %{x}<br>",
y_var_name, ": %{y}<br>",
color_var_name, ": %{text}</b><extra></extra>")
) %>%
layout(
xaxis = list(
title = paste0("<b>", x_var_name, "</b>"),
titlefont = list(
size = 20
),
tickfont = list(
size = 18
),
categoryorder = "array"
),
yaxis = list(
title = paste0("<b>", y_var_name, "</b>"),
titlefont = list(
size = 20
),
tickfont = list(
size = 18
)
),
margin = list(
l = 10,
r = 10,
t = 10,
b = 10
),
hoverlabel = list(
font = list(
size = 18
)
),
showlegend = TRUE,
legend = list(
title = list(
text = paste0("<br><b>", color_var_name, "</b>"),
font = list(
size = 18
)
)
)
)
install.packages("RColorBrewer")
library(RColorBrewer)
unique(dt$sigma_w_level)
length(unique(dt$sigma_w_level))
dt[, sigma_w_level := cut(sigma_w/w, breaks = seq(from = 0, to = 0.1, by = 0.02), labels = FALSE)]
length(unique(dt$sigma_w_level))
my_palette <- c("#c70039", "#2a7b9b", "#eddd53", "#4caf50", "#ff9800")
plot_ly(
data = dt,
x = ~eval(parse(text = x_var)),
y = ~eval(parse(text = y_var)),
color = ~eval(parse(text = color_var)),
colors = my_palette,
text = ~color_var,
type = "scatter",
mode = "markers",
marker = list(
size = 10
),
hovertemplate = paste0("<b>", x_var_name, ": %{x}<br>",
y_var_name, ": %{y}<br>",
color_var_name, ": %{text}</b><extra></extra>")
) %>%
layout(
xaxis = list(
title = paste0("<b>", x_var_name, "</b>"),
titlefont = list(
size = 20
),
tickfont = list(
size = 18
),
categoryorder = "array"
),
yaxis = list(
title = paste0("<b>", y_var_name, "</b>"),
titlefont = list(
size = 20
),
tickfont = list(
size = 18
)
),
margin = list(
l = 10,
r = 10,
t = 10,
b = 10
),
hoverlabel = list(
font = list(
size = 18
)
),
showlegend = TRUE,
legend = list(
title = list(
text = paste0("<br><b>", color_var_name, "</b>"),
font = list(
size = 18
)
)
)
)
hist(dt$sigma_w_w)
hist(dt$sigma_w_w, breaks = 100)
hist(dt$sigma_w_w, breaks = 1000)
hist(dt[sigma_w_w < 0.01,sigma_w_w], breaks = 1000)
hist(dt[sigma_w_w < 0.001,sigma_w_w], breaks = 500)
hist(dt[sigma_w_w < 0.0001,sigma_w_w], breaks = 500)
head(dt)
hist(dt[sigma_w_w < 0.0001,w], breaks = 500)
hist(dt[sigma_w_w < 0.001,w], breaks = 500)
y_var <- "e"
plot_ly(
data = dt,
x = ~eval(parse(text = x_var)),
y = ~eval(parse(text = y_var)),
color = ~eval(parse(text = color_var)),
colors = my_palette,
text = ~color_var,
type = "scatter",
mode = "markers",
marker = list(
size = 10
),
hovertemplate = paste0("<b>", x_var, ": %{x}<br>",
y_var, ": %{y}<br>",
color_var, ": %{text}</b><extra></extra>")
) %>%
layout(
xaxis = list(
title = paste0("<b>", x_var, "</b>"),
titlefont = list(
size = 20
),
tickfont = list(
size = 18
),
categoryorder = "array"
),
yaxis = list(
title = paste0("<b>", y_var, "</b>"),
titlefont = list(
size = 20
),
tickfont = list(
size = 18
)
),
margin = list(
l = 10,
r = 10,
t = 10,
b = 10
),
hoverlabel = list(
font = list(
size = 18
)
),
showlegend = TRUE,
legend = list(
title = list(
text = paste0("<br><b>", color_var, "</b>"),
font = list(
size = 18
)
)
)
)
